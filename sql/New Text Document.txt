

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
INSERT ALL



drop table S1 ;
create table S1(
    student_id INT , 
    f_name varchar(21), 
    l_name varchar(21),
    age INT
);

drop table S2 ;
create table S2(
    student_id INT , 
    f_name varchar(21), 
    l_name varchar(21),
    age INT
);


insert all
into S1(student_id ,f_name, l_name ,age ) values(10 , 'ikki ', 'pra', 45)
into S1(student_id ,f_name, l_name ,age) values( 1 , 'elektra' , 'min', 25) 
into S2(student_id ,f_name, l_name ,age) values( 1 , 'elektra' , 'min', 25)
select * from dual;

select 
    "STUDENT_ID",
    "F_NAME",
    "L_NAME",
    "AGE"
from "S1";

select 
    "STUDENT_ID",
    "F_NAME",
    "L_NAME",
    "AGE"
from "S2";








----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


 UPDATE
drop table S1 ;
create table S1(
    student_id INT , 
    f_name varchar(21), 
    l_name varchar(21),
    age INT
);

drop table S2 ;
create table S2(
    student_id INT , 
    f_name varchar(21), 
    l_name varchar(21),
    age INT
);


insert all
into S1(student_id ,f_name, l_name ,age ) values(10 , 'ikki ', 'pra', 45)
into S1(student_id ,f_name, l_name ,age) values( 4 , 'elektra' , 'min', 25) 
into S1(student_id ,f_name, l_name ,age) values( 6 , 'rlektra' , 'min', 45) 
into S1(student_id ,f_name, l_name ,age) values( 7 , 'llektra' , 'min', 65) 
into S1(student_id ,f_name, l_name ,age) values( 2 , 'ylektra' , 'min', 85) 
into S2(student_id ,f_name, l_name ,age) values( 3 , 'mlektra' , 'min', 25)
select * from dual;


update S1 
set age = 46
where student_id >= 7;


update S1 
set age = 90 ,  l_name = 'memem'
where f_name = 'rlektra';

-- update data with the help of data from another table
----update S1
----set f_name = (select f_name from S2 where rownum = 1);

select 
    "STUDENT_ID",
    "F_NAME",
    "L_NAME",
    "AGE"
from "S1";

select 
    "STUDENT_ID",
    "F_NAME",
    "L_NAME",
    "AGE"
from "S2";




----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



BETWEEN
drop table S1 ;
create table S1(
    student_id INT , 
    f_name varchar(21), 
    l_name varchar(21),
    age INT
);

drop table S2 ;
create table S2(
    student_id INT , 
    f_name varchar(21), 
    l_name varchar(21),
    age INT
);


insert all
into S1(student_id ,f_name, l_name ,age ) values(10 , 'ikki ', 'pra', 45)
into S1(student_id ,f_name, l_name ,age) values( 4 , 'elektra' , 'min', 25) 
into S1(student_id ,f_name, l_name ,age) values( 6 , 'rlektra' , 'min', 45) 
into S1(student_id ,f_name, l_name ,age) values( 7 , 'llektra' , 'min', 65) 
into S1(student_id ,f_name, l_name ,age) values( 2 , 'ylektra' , 'min', 85) 
into S2(student_id ,f_name, l_name ,age) values( 3 , 'mlektra' , 'min', 25)
select * from dual;


update S1 
set age = 46
where student_id >= 7;


update S1 
set age = 90 ,  l_name = 'memem'
where f_name = 'rlektra';

-- update data with the help of data from another table
----update S1
----set f_name = (select f_name from S2 where rownum = 1);

select  * from s1 
where age BETWEEN 40 and 85;



select  * from s1 
where age NOT BETWEEN 40 and 85;


delete from S1
where age between 10 and 20;

--insert into  another table
--insert into S2(select  * from s1 
--where age BETWEEN 40 and 85;);

-- for date it's like this
--select  * from s1 
--where date BETWEEN TO_DATE () and TO_DATE ();

select 
    "STUDENT_ID",
    "F_NAME",
    "L_NAME",
    "AGE"
from "S1";

select 
    "STUDENT_ID",
    "F_NAME",
    "L_NAME",
    "AGE"
from "S2";






----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


DELETE 
drop table S1 ;
create table S1(
    student_id INT , 
    f_name varchar(21), 
    l_name varchar(21),
    age INT
);

drop table S2 ;
create table S2(
    student_id INT , 
    f_name varchar(21), 
    l_name varchar(21),
    age INT
);


insert all
into S1(student_id ,f_name, l_name ,age ) values(10 , 'ikki ', 'pra', 45)
into S1(student_id ,f_name, l_name ,age) values( 4 , 'elektra' , 'min', 25) 
into S1(student_id ,f_name, l_name ,age) values( 6 , 'rlektra' , 'min', 45) 
into S1(student_id ,f_name, l_name ,age) values( 7 , 'llektra' , 'min', 65) 
into S1(student_id ,f_name, l_name ,age) values( 2 , 'ylektra' , 'min', 85) 
into S2(student_id ,f_name, l_name ,age) values( 3 , 'mlektra' , 'min', 25)
select * from dual;



-- 1 condi
delete from S1 
where f_name = 'llektra';


--both cond satisfied will work
delete from S1 
where age = 21 and f_name ='ishan';

-- 1 condi satisfied will work
delete from S1 
where age = 21 or f_name ='ishan';


-- delete from S1
select 
    "STUDENT_ID",
    "F_NAME",
    "L_NAME",
    "AGE"
from "S1";

select 
    "STUDENT_ID",
    "F_NAME",
    "L_NAME",
    "AGE"
from "S2";




----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


ALTER MODIFY RENAME


drop table S1 ;
create table S1(
    student_id INT , 
    f_name varchar(21), 
    l_name varchar(21),
    age INT
);

drop table S2 ;
create table S2(
    student_id INT , 
    f_name varchar(21), 
    l_name varchar(21),
    age INT
);


insert all
into S1(student_id ,f_name, l_name ,age ) values(10 , 'ikki ', 'pra', 45)
into S1(student_id ,f_name, l_name ,age) values( 4 , 'elektra' , 'min', 25) 
into S1(student_id ,f_name, l_name ,age) values( 6 , 'rlektra' , 'min', 45) 
into S1(student_id ,f_name, l_name ,age) values( 7 , 'llektra' , 'min', 65) 
into S1(student_id ,f_name, l_name ,age) values( 2 , 'ylektra' , 'min', 85) 
into S2(student_id ,f_name, l_name ,age) values( 3 , 'mlektra' , 'min', 25)
select * from dual;


-- this command will not work cuz lname already has varchar elements but if it was empty then this command would have worked
--alter table S1 modify(f_name Varchar(56) ,l_name int );
-- rename
alter table S1 rename column student_id to idd;



select 
  *
from "S1";

select 
*
from "S2";


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


LIKE STRING MATCHING BASICALLY


drop table S1 ;
create table S1(
    student_id INT , 
    f_name varchar(21), 
    l_name varchar(21),
    age INT
);

drop table S2 ;
create table S2(
    student_id INT , 
    f_name varchar(21), 
    l_name varchar(21),
    age INT
);


insert all
into S1(student_id ,f_name, l_name ,age ) values(10 , 'ikki ', 'pra', 45)
into S1(student_id ,f_name, l_name ,age) values( 4 , 'elektra' , 'min', 25) 
into S1(student_id ,f_name, l_name ,age) values( 6 , 'rlektra' , 'min', 45) 
into S1(student_id ,f_name, l_name ,age) values( 7 , 'llektra' , 'min', 65) 
into S1(student_id ,f_name, l_name ,age) values( 2 , 'ylektra' , 'min', 85) 
into S2(student_id ,f_name, l_name ,age) values( 3 , 'mlektra' , 'min', 25)
select * from dual;




-- select any col 
--select student_id from S1
--where f_name like '%e%';


-- display name , hire dateof employee whose dob is in dex
--select emp_name , Hire_date from S3
--where date like '%dec%';


-- only 5 letter name
select student_id from S1
where f_name like '_____';


select student_id from S1
where f_name not like '_____';

select 
  *
from "S1";

select 
*
from "S2";

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE

drop table S1 ;
create table S1(
    student_id INT  primary key , 
    f_name varchar(21), 
    l_name varchar(21),
    age INT
);

drop table S2 ;
create table S2(
    student_id INT , 
    f_name varchar(21), 
    l_name varchar(21),
    age INT
);


drop table S3 ;
create table S3(
    student_id INT , 
    f_name varchar(21), 
    l_name varchar(21),
    age INT,
    DOB date,
    primary key(student_id)
);


insert all
into S1(student_id ,f_name, l_name ,age ) values(10 , 'ikki ', 'pra', 45)
into S1(student_id ,f_name, l_name ,age) values( 4 , 'elektra' , 'min', 25) 
into S1(student_id ,f_name, l_name ,age) values( 6 , 'rlektra' , 'min', 45) 
into S1(student_id ,f_name, l_name ,age) values( 7 , 'llektra' , 'min', 65) 
into S1(student_id ,f_name, l_name ,age) values( 2 , 'ylektra' , 'min', 85) 
into S2(student_id ,f_name, l_name ,age) values( 3 , 'mlektra' , 'min', 25)
select * from dual;

insert all
into S3(student_id ,f_name, l_name ,age, DOB ) values(10 , 'ikki ', 'pra', 45 , '19-jul-1666' )
into S3(student_id ,f_name, l_name ,age, DOB) values( 4 , 'elektra' , 'min', 25, '19-jul-1666' ) 
into S3(student_id ,f_name, l_name ,age, DOB) values( 6 , 'rlektra' , 'min', 45, '19-jul-1666' ) 
into S3(student_id ,f_name, l_name ,age, DOB) values( 7 , 'llektra' , 'min', 65, '19-jul-1666' ) 
into S3(student_id ,f_name, l_name ,age, DOB) values( 2 , 'ylektra' , 'min', 85, '19-jul-1666' ) 
into S3(student_id ,f_name, l_name ,age, DOB) values( 3 , 'mlektra' , 'min', 25, '19-jul-1666' )
select * from dual;
drop table s4;
create table s4 as
(select * from  S1);
desC s3;

drop table S5;
create table S5 as (select f_name , DOB from S3 where student_id > 4);
 



drop table s6;
create table s6 as
(select  student_id , DOB from s1 , s3 where student_id = 10 and student_id = idd);

select * from S5;
select  * from S4;
select  * from S3;
select 
  *
from "S1";

select 
*
from "S2";



----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
IN



drop table S1 ;
create table S1(
    student_id INT  primary key , 
    f_name varchar(21), 
    l_name varchar(21),
    age INT
);

drop table S2 ;
create table S2(
    student_id INT , 
    f_name varchar(21), 
    l_name varchar(21),
    age INT
);


drop table S3 ;
create table S3(
    student_id INT , 
    f_name varchar(21), 
    l_name varchar(21),
    age INT,
    DOB date,
    primary key(student_id)
);


insert all
into S1(student_id ,f_name, l_name ,age ) values(10 , 'ikki ', 'pra', 45)
into S1(student_id ,f_name, l_name ,age) values( 4 , 'elektra' , 'min', 25) 
into S1(student_id ,f_name, l_name ,age) values( 6 , 'rlektra' , 'min', 45) 
into S1(student_id ,f_name, l_name ,age) values( 7 , 'llektra' , 'min', 65) 
into S1(student_id ,f_name, l_name ,age) values( 2 , 'ylektra' , 'min', 85) 
into S2(student_id ,f_name, l_name ,age) values( 3 , 'mlektra' , 'min', 25)
select * from dual;

insert all
into S3(student_id ,f_name, l_name ,age, DOB ) values(10 , 'ikki ', 'pra', 45 , '19-jul-1666' )
into S3(student_id ,f_name, l_name ,age, DOB) values( 4 , 'elektra' , 'min',  , '19-jul-1666' ) 
into S3(student_id ,f_name, l_name ,age, DOB) values( 6 , 'rlektra' , 'min', 45, '19-jul-1666' ) 
into S3(student_id ,f_name, l_name ,age, DOB) values( 7 , 'llektra' , 'min', 65, '19-jul-1666' ) 
into S3(student_id ,f_name, l_name ,age, DOB) values( 2 , 'ylektra' , 'min', 85, '19-jul-1666' ) 
into S3(student_id ,f_name, l_name ,age, DOB) values( 3 , 'mlektra' , 'min', 25, '19-jul-1666' )
select * from dual;


 





  


select * from S1 where
f_name In('rmoo' , 'elektra' , 'Ishan' );



select * from S1 where
f_name not In('rmoo' , 'elektra' , 'Ishan' );

delete from S1 where f_name in('Ishan ' , 'romooo');


select max(age) from S1 where
age not In(select max(age) from S1);



select  * from S3;
select 
  *
from "S1";

select 
*
from "S2";


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

GROUP BY HAVING


drop table S1 ;
create table S1(
    student_id INT  primary key , 
    f_name varchar(21), 
    l_name varchar(21),
    age INT
);

drop table S2 ;
create table S2(
    student_id INT , 
    f_name varchar(21), 
    l_name varchar(21),
    age INT
);


drop table S3 ;
create table S3(
    student_id INT , 
    f_name varchar(21), 
    l_name varchar(21),
    age INT,
    DOB date,
    primary key(student_id)
);


insert all
into S1(student_id ,f_name, l_name ,age ) values(10 , 'ikki ', 'pra', 45)
into S1(student_id ,f_name, l_name ,age) values( 4 , 'elektra' , 'min', 25) 
into S1(student_id ,f_name, l_name ,age) values( 6 , 'rlektra' , 'min', 45) 
into S1(student_id ,f_name, l_name ,age) values( 7 , 'llektra' , 'min', 65) 
into S1(student_id ,f_name, l_name ,age) values( 2 , 'ylektra' , 'min', 85) 
into S2(student_id ,f_name, l_name ,age) values( 3 , 'mlektra' , 'min', 25)
into S1(student_id ,f_name, l_name ,age) values( 3 , 'mlektra' , 'min', 25)
into S1(student_id ,f_name, l_name ) values( 45 , 'ektra' , 'min')
select * from dual;

insert all
into S3(student_id ,f_name, l_name ,age, DOB ) values(10 , 'ikki ', 'pra', 45 , '19-jul-1666' )
into S3(student_id ,f_name, l_name ,age, DOB) values( 4 , 'elektra' , 'min', 25, '19-jul-1656' ) 
into S3(student_id ,f_name, l_name ,age, DOB) values( 6 , 'rlektra' , 'min', 45, '19-jul-1645' ) 
into S3(student_id ,f_name, l_name ,age, DOB) values( 7 , 'llektra' , 'min', 65, '19-jul-1633' ) 
into S3(student_id ,f_name, l_name ,age, DOB) values( 2 , 'ylektra' , 'min', 85, '19-jul-1631' ) 
into S3(student_id ,f_name, l_name ,age, DOB) values( 3 , 'mlektra' , 'min', 25, '19-jul-1612' )
select * from dual;


 

--select age, count(*) as countt from S1
--group by age;

--select l_name , count(*) as countt from S1
--group by l_name;

--select l_name , max(age) as maxage , min(age) as minage from S1
--group by l_name;


--select l_name , count(*) from S1
--group by l_name 
--having count(age) > 3;


--select l_name , count(*) from S1
--group by l_name 
--having l_name = 'pra';



--select  sum(age) as summm , l_name  from S1 
--group by l_name
--hAVING  sum(age) = 45;

select to_char(DOB , 'YYYY') as dobb , count(*) as countt
from S3
group by to_char(DOB , 'YYYY')
having to_char(DOB , 'YYYY') = '1633';





 



select  * from S3;
select 
  *
from "S1";

select 
*
from "S2";

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ORDER BY











drop table S1 ;
create table S1(
    student_id INT  primary key , 
    f_name varchar(21), 
    l_name varchar(21),
    age INT
);

drop table S2 ;
create table S2(
    student_id INT , 
    f_name varchar(21), 
    l_name varchar(21),
    age INT
);


drop table S3 ;
create table S3(
    student_id INT , 
    f_name varchar(21), 
    l_name varchar(21),
    age INT,
    DOB date,
    primary key(student_id)
);


insert all
into S1(student_id ,f_name, l_name ,age ) values(10 , 'ikki ', 'pra', 45)
into S1(student_id ,f_name, l_name ,age) values( 4 , 'elektra' , 'min', 25) 
into S1(student_id ,f_name, l_name ,age) values( 6 , 'rlektra' , 'min', 45) 
into S1(student_id ,f_name, l_name ,age) values( 7 , 'llektra' , 'min', 65) 
into S1(student_id ,f_name, l_name ,age) values( 2 , 'ylektra' , 'min', 85) 
into S2(student_id ,f_name, l_name ,age) values( 3 , 'mlektra' , 'min', 25)
into S1(student_id ,f_name, l_name ,age) values( 3 , 'mlektra' , 'min', 25)
into S1(student_id ,f_name, l_name ) values( 45 , 'ektra' , 'min')
select * from dual;

insert all
into S3(student_id ,f_name, l_name ,age, DOB ) values(10 , 'ikki ', 'pra', 45 , '19-jul-1666' )
into S3(student_id ,f_name, l_name ,age, DOB) values( 4 , 'elektra' , 'min', 25, '19-jul-1656' ) 
into S3(student_id ,f_name, l_name ,age, DOB) values( 6 , 'rlektra' , 'min', 45, '19-jul-1645' ) 
into S3(student_id ,f_name, l_name ,age, DOB) values( 7 , 'llektra' , 'min', 65, '19-jul-1633' ) 
into S3(student_id ,f_name, l_name ,age, DOB) values( 2 , 'ylektra' , 'min', 85, '19-jul-1631' ) 
into S3(student_id ,f_name, l_name ,age, DOB) values( 3 , 'mlektra' , 'min', 25, '19-jul-1612' )
select * from dual;


 select * from S1
 where age = 45
order by f_name;


-- col no
select * from S1
order by 2;



select f_name, age * 12 as ann  from S1
order by ann ;

select f_name , l_name, age 
from S1 
order by age desc;

-- sorting bascially
select * from S1
order by f_name;


select * from S1
order by l_name desc , age desc;

select * from S3
order by dob;





 



select  * from S3;
select 
  *
from "S1";

select 
*
from "S2";
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


WHERE


drop table S1 ;
create table S1(
    student_id INT  primary key , 
    f_name varchar(21), 
    l_name varchar(21),
    age INT
);

drop table S2 ;
create table S2(
    student_id INT , 
    f_name varchar(21), 
    l_name varchar(21),
    age INT
);


drop table S3 ;
create table S3(
    student_id INT , 
    f_name varchar(21), 
    l_name varchar(21),
    age INT,
    DOB date,
    primary key(student_id)
);


insert all
into S1(student_id ,f_name, l_name ,age ) values(10 , 'ikki ', 'pra', 45)
into S1(student_id ,f_name, l_name ,age) values( 4 , 'elektra' , 'min', 25) 
into S1(student_id ,f_name, l_name ,age) values( 6 , 'rlektra' , 'min', 45) 
into S1(student_id ,f_name, l_name ,age) values( 7 , 'llektra' , 'min', 65) 
into S1(student_id ,f_name, l_name ,age) values( 2 , 'ylektra' , 'min', 85) 
into S2(student_id ,f_name, l_name ,age) values( 3 , 'mlektra' , 'min', 25)
into S1(student_id ,f_name, l_name ,age) values( 3 , 'mlektra' , 'min', 25)
into S1(student_id ,f_name, l_name ) values( 45 , 'ektra' , 'min')
select * from dual;

insert all
into S3(student_id ,f_name, l_name ,age, DOB ) values(10 , 'ikki ', 'pra', 45 , '19-jul-1666' )
into S3(student_id ,f_name, l_name ,age, DOB) values( 4 , 'elektra' , 'min', 25, '19-jul-1656' ) 
into S3(student_id ,f_name, l_name ,age, DOB) values( 6 , 'rlektra' , 'min', 45, '19-jul-1645' ) 
into S3(student_id ,f_name, l_name ,age, DOB) values( 7 , 'llektra' , 'min', 65, '19-jul-1633' ) 
into S3(student_id ,f_name, l_name ,age, DOB) values( 2 , 'ylektra' , 'min', 85, '19-jul-1631' ) 
into S3(student_id ,f_name, l_name ,age, DOB) values( 3 , 'mlektra' , 'min', 25, '19-jul-1612' )
select * from dual;


 select * from S1
 where l_name = 'min';
select * from S1
 where l_name != 'min';

 -- between can be used for values between a range along with where



select  * from S3;
select 
  *
from "S1";

select 
*
from "S2";

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
join




drop table S1 ;
create table S1(
    student_id INT  primary key , 
    f_name varchar(21), 
    l_name varchar(21),
    age INT
);

drop table S2 ;
create table S2(
    student_id INT , 
    f_name varchar(21), 
    l_name varchar(21),
    age INT
);


drop table S3 ;
create table S3(
    student_id INT , 
    marks INT , 
    DoB date ,
    primary key(student_id)
);


insert all
into S1(student_id ,f_name, l_name ,age ) values(10 , 'ikki ', 'pra', 45)
into S1(student_id ,f_name, l_name ,age) values( 4 , 'elektra' , 'min', 25) 
into S1(student_id ,f_name, l_name ,age) values( 6 , 'rlektra' , 'min', 45) 
into S1(student_id ,f_name, l_name ,age) values( 7 , 'llektra' , 'min', 65) 
into S1(student_id ,f_name, l_name ,age) values( 2 , 'ylektra' , 'min', 85) 
into S2(student_id ,f_name, l_name ,age) values( 3 , 'mlektra' , 'min', 25)
into S1(student_id ,f_name, l_name ,age) values( 3 , 'mlektra' , 'min', 25)
into S1(student_id ,f_name, l_name ) values( 45 , 'ektra' , 'min')
select * from dual;

insert all
into S3(student_id , marks , DOB ) values(10 , 45 , '19-jul-1666' )
into S3(student_id , marks ,  DOB) values( 4 , 25, '19-jul-1656' ) 
into S3(student_id ,marks ,  DOB) values( 6 ,  45, '19-jul-1645' ) 
into S3(student_id ,marks ,  DOB) values( 7 , 65, '19-jul-1633' ) 
into S3(student_id ,marks ,  DOB) values( 2 , 3, '19-jul-1631' ) 
into S3(student_id ,marks ,  DOB) values( 3 ,  10, '19-jul-1612' )
select * from dual;


--- self join
select distinct e1.student_id 
from S1 as e1 inner join S1 as  e2 
on (e1.student_id = e2.student_id 
and e1.f_name <> e2.f_name); 
--select * from S1 Cross join S3;

--select  * from  S1 Inner Join S3 on (S1.student_id  = S3.student_id);
-- where can also be used here
--select * from S1 , S3 where S1.student_id = s3.student_id;


-- select * from S1 NATURAL jOIN S3;

-- select  * from S1 left outer join S3 on S1.student_id = S3.student_id;
-- select  * from S1 right outer join S3 on S1.student_id = S3.student_id;
--select  * from S1 full outer join S3 on S1.student_id = S3.student_id;

-- FULL OUTER JOIN that do not support full outer join 
--select  * from S1 left outer join S3 on S1.student_id = S3.student_id UNION 
--select  * from S1 right outer join S3 on S1.student_id = S3.student_id;



 ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SUBQ


drop table S1 ;
create table S1(
    student_id INT  primary key , 
    f_name varchar(21), 
    l_name varchar(21),
    age INT
);

drop table S2 ;
create table S2(
    student_id INT , 
    f_name varchar(21), 
    l_name varchar(21),
    age INT
);


drop table S3 ;
create table S3(
    student_id INT , 
    marks INT , 
    DoB date ,
    primary key(student_id)
);


insert all
into S1(student_id ,f_name, l_name ,age ) values(10 , 'ikki ', 'pra', 45)
into S1(student_id ,f_name, l_name ,age) values( 4 , 'elektra' , 'min', 25) 
into S1(student_id ,f_name, l_name ,age) values( 6 , 'rlektra' , 'min', 45) 
into S1(student_id ,f_name, l_name ,age) values( 7 , 'llektra' , 'min', 65) 
into S1(student_id ,f_name, l_name ,age) values( 2 , 'ylektra' , 'min', 85) 
into S2(student_id ,f_name, l_name ,age) values( 3 , 'mlektra' , 'min', 25)
into S1(student_id ,f_name, l_name ,age) values( 3 , 'mlektra' , 'min', 25)
into S1(student_id ,f_name, l_name ) values( 45 , 'ektra' , 'min')
select * from dual;

insert all
into S3(student_id , marks , DOB ) values(10 , 45 , '19-jul-1666' )
into S3(student_id , marks ,  DOB) values( 4 , 25, '19-jul-1656' ) 
into S3(student_id ,marks ,  DOB) values( 6 ,  45, '19-jul-1645' ) 
into S3(student_id ,marks ,  DOB) values( 7 , 65, '19-jul-1633' ) 
into S3(student_id ,marks ,  DOB) values( 2 , 3, '19-jul-1631' ) 
into S3(student_id ,marks ,  DOB) values( 3 ,  10, '19-jul-1612' )
select * from dual;


-- subq in 1 table
select f_name ,age from S1 where                  
age = (select max(age) from S1); 



-- subq from 2 tables
select * from S1 where student_id Not in 
(select student_id from S3);

select f_name from S1 where age= (select max(age) from S1 where age not in (select max(age) from S1));

select * from S1 where age = 
(select min(age) from S1 where Age in  
(select distinct age from S1 order by age desc fetch first 5 rows only)) ;

-- select * from S1 where age = 
-- (select min(age) from S1 where Age in  
-- (select top  5 distinct age from S1 order by age desc)) ;


select * from S1 where
age >  
(select avg(age) from S1 );

select  * from S1 where age  > aLL (select avg(age) from S1 group by l_name); 


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CORRELATIONAL SUBQ

drop table S1 ;
create table S1(
    student_id INT  primary key , 
    f_name varchar(21), 
    l_name varchar(21),
    age INT
);

drop table S2 ;
create table S2(
    student_id INT , 
    f_name varchar(21), 
    l_name varchar(21),
    age INT
);


drop table S3 ;
create table S3(
    student_id INT , 
    marks INT , 
    DoB date ,
    primary key(student_id)
);


insert all
into S1(student_id ,f_name, l_name ,age ) values(10 , 'ikki ', 'pra', 45)
into S1(student_id ,f_name, l_name ,age) values( 4 , 'elektra' , 'min', 25) 
into S1(student_id ,f_name, l_name ,age) values( 6 , 'rlektra' , 'min', 45) 
into S1(student_id ,f_name, l_name ,age) values( 7 , 'llektra' , 'min', 65) 
into S1(student_id ,f_name, l_name ,age) values( 2 , 'ylektra' , 'min', 85) 
into S2(student_id ,f_name, l_name ,age) values( 3 , 'mlektra' , 'min', 25)
into S1(student_id ,f_name, l_name ,age) values( 3 , 'mlektra' , 'min', 25)
into S1(student_id ,f_name, l_name ) values( 45 , 'ektra' , 'min')
select * from dual;

insert all
into S3(student_id , marks , DOB ) values(10 , 45 , '19-jul-1666' )
into S3(student_id , marks ,  DOB) values( 4 , 25, '19-jul-1656' ) 
into S3(student_id ,marks ,  DOB) values( 6 ,  45, '19-jul-1645' ) 
into S3(student_id ,marks ,  DOB) values( 7 , 65, '19-jul-1633' ) 
into S3(student_id ,marks ,  DOB) values( 2 , 3, '19-jul-1631' ) 
into S3(student_id ,marks ,  DOB) values( 3 ,  10, '19-jul-1612' )
select * from dual;


select f_name from S1 where age > (select avg(age) from S1) ;





























-- Q-1. Write an SQL query to fetch “FIRST_NAME” from Worker table using the alias name as <WORKER_NAME>.
select first_name AS WORKER_NAME from worker;

-- Q-2. Write an SQL query to fetch “FIRST_NAME” from Worker table in upper case.
select UPPER(first_name) from worker;

-- Q-3. Write an SQL query to fetch unique values of DEPARTMENT from Worker table.
SELECT distinct department from worker;

-- Q-4. Write an SQL query to print the first three characters of  FIRST_NAME from Worker table.
select substring(first_name, 1, 3) from worker;

-- Q-5. Write an SQL query to find the position of the alphabet (‘b’) in the first name column ‘Amitabh’ from Worker table.
select INSTR(first_name, 'B') from worker where first_name = 'Amitabh';

-- Q-6. Write an SQL query to print the FIRST_NAME from Worker table after removing white spaces from the right side.
select RTRIM(first_name) from worker;

-- Q-7. Write an SQL query to print the DEPARTMENT from Worker table after removing white spaces from the left side.
select LTRIM(first_name) from worker;

-- Q-8. Write an SQL query that fetches the unique values of DEPARTMENT from Worker table and prints its length.
select distinct department, LENGTH(department) from worker;

-- Q-9. Write an SQL query to print the FIRST_NAME from Worker table after replacing ‘a’ with ‘A’.
select REPLACE(first_name, 'a', 'A')  from worker;

-- Q-10. Write an SQL query to print the FIRST_NAME and LAST_NAME from Worker table into a single column COMPLETE_NAME.
-- A space char should separate them.
select CONCAT(first_name, ' ', last_name) AS COMPLETE_NAME from worker;

-- Q-11. Write an SQL query to print all Worker details from the Worker table order by FIRST_NAME Ascending.
select * from worker ORDER by first_name;

-- Q-12. Write an SQL query to print all Worker details from the Worker table order by 
-- FIRST_NAME Ascending and DEPARTMENT Descending.
select * from worker order by first_name, department DESC;

-- Q-13. Write an SQL query to print details for Workers with the first name as “Vipul” and “Satish” from Worker table.
select * from worker where first_name IN ('Vipul', 'Satish');

-- Q-14. Write an SQL query to print details of workers excluding first names, “Vipul” and “Satish” from Worker table.
select * from worker where first_name NOT IN ('Vipul', 'Satish');

-- Q-15. Write an SQL query to print details of Workers with DEPARTMENT name as “Admin*”.
select * from worker where department LIKE 'Admin%';

-- Q-16. Write an SQL query to print details of the Workers whose FIRST_NAME contains ‘a’.
select * from worker where first_name LIKE '%a%';

-- Q-17. Write an SQL query to print details of the Workers whose FIRST_NAME ends with ‘a’.
select * from worker where first_name LIKE '%a';

-- Q-18. Write an SQL query to print details of the Workers whose FIRST_NAME ends with ‘h’ and contains six alphabets.
select * from worker where first_name LIKE '_____h';

-- Q-19. Write an SQL query to print details of the Workers whose SALARY lies between 100000 and 500000.
select * from worker where salary between 100000 AND 500000;

-- Q-20. Write an SQL query to print details of the Workers who have joined in Feb’2014.
select * from worker where YEAR(joining_date) = 2014 AND MONTH(joining_date) = 02;

-- Q-21. Write an SQL query to fetch the count of employees working in the department ‘Admin’.
select department, count(*) from worker where department = 'Admin';

-- Q-22. Write an SQL query to fetch worker full names with salaries >= 50000 and <= 100000.
select concat(first_name, ' ', last_name) from worker
where salary between 50000 and 100000;

-- Q-23. Write an SQL query to fetch the no. of workers for each department in the descending order.
select department, count(worker_id) AS no_of_worker from worker group by department
ORDER BY no_of_worker desc;

-- Q-24. Write an SQL query to print details of the Workers who are also Managers.
select w.* from worker as w inner join title as t on w.worker_id = t.worker_ref_id where t.worker_title = 'Manager';

-- Q-25. Write an SQL query to fetch number (more than 1) of same titles in the ORG of different types.
select worker_title, count(*) as count from title group by worker_title having count > 1;

-- Q-26. Write an SQL query to show only odd rows from a table.
-- select * from worker where MOD (WORKER_ID, 2) != 0; 
select * from worker where MOD (WORKER_ID, 2) <> 0;

-- Q-27. Write an SQL query to show only even rows from a table. 
select * from worker where MOD (WORKER_ID, 2) = 0;

-- Q-28. Write an SQL query to clone a new table from another table.
CREATE TABLE worker_clone LIKE worker;
INSERT INTO worker_clone select * from worker;
select * from worker_clone;

-- Q-29. Write an SQL query to fetch intersecting records of two tables.
select worker.* from worker inner join worker_clone using(worker_id);

-- Q-30. Write an SQL query to show records from one table that another table does not have.
-- MINUS
select worker.* from worker left join worker_clone using(worker_id) WHERE worker_clone.worker_id is NULL;

-- Q-31. Write an SQL query to show the current date and time.
-- DUAL
select curdate();
select now();

-- Q-32. Write an SQL query to show the top n (say 5) records of a table order by descending salary.
select * from worker order by salary desc LIMIT 5;

-- Q-33. Write an SQL query to determine the nth (say n=5) highest salary from a table.
select * from worker order by salary desc LIMIT 4,1;

-- Q-34. Write an SQL query to determine the 5th highest salary without using LIMIT keyword.
select salary from worker w1
WHERE 4 = (
SELECT COUNT(DISTINCT (w2.salary))
from worker w2
where w2.salary >= w1.salary
);
 
-- Q-35. Write an SQL query to fetch the list of employees with the same salary.
select w1.* from worker w1, worker w2 where w1.salary = w2.salary and w1.worker_id != w2.worker_id;

-- Q-36. Write an SQL query to show the second highest salary from a table using sub-query.
select max(salary) from worker
where salary not in (select max(salary) from worker);

-- Q-37. Write an SQL query to show one row twice in results from a table.
select * from worker
UNION ALL
select * from worker ORDER BY worker_id;

-- Q-38. Write an SQL query to list worker_id who does not get bonus.
select worker_id from worker where worker_id not in (select worker_ref_id from bonus);

-- Q-39. Write an SQL query to fetch the first 50% records from a table.
select * from worker where worker_id <= ( select count(worker_id)/2 from worker);

-- Q-40. Write an SQL query to fetch the departments that have less than 4 people in it.
select department, count(department) as depCount from worker group by department having depCount < 4;

-- Q-41. Write an SQL query to show all departments along with the number of people in there.
select department, count(department) as depCount from worker group by department;

-- Q-42. Write an SQL query to show the last record from a table.
select * from worker where worker_id = (select max(worker_id) from worker);

-- Q-43. Write an SQL query to fetch the first row of a table.
select * from worker where worker_id = (select min(worker_id) from worker);

-- Q-44. Write an SQL query to fetch the last five records from a table.
(select * from worker order by worker_id desc limit 5) order by worker_id;

-- Q-45. Write an SQL query to print the name of employees having the highest salary in each department.
select w.department, w.first_name, w.salary from
 (select max(salary) as maxsal, department from worker group by department) temp
inner join worker w on temp.department = w.department and temp.maxsal = w.salary;

-- Q-46. Write an SQL query to fetch three max salaries from a table using co-related subquery
select distinct salary from worker w1
where 3 >= (select count(distinct salary) from worker w2 where w1.salary <= w2.salary) order by w1.salary desc;
-- DRY RUN AFTER REVISING THE CORELATED SUBQUERY CONCEPT FROM LEC-9.
select distinct salary from worker order by salary desc limit 3;

-- Q-47. Write an SQL query to fetch three min salaries from a table using co-related subquery
select distinct salary from worker w1
where 3 >= (select count(distinct salary) from worker w2 where w1.salary >= w2.salary) order by w1.salary desc;

-- Q-48. Write an SQL query to fetch nth max salaries from a table.
select distinct salary from worker w1
where n >= (select count(distinct salary) from worker w2 where w1.salary <= w2.salary) order by w1.salary desc;

-- Q-49. Write an SQL query to fetch departments along with the total salaries paid for each of them.
select department , sum(salary) as depSal from worker group by department order by depSal desc;

-- Q-50. Write an SQL query to fetch the names of workers who earn the highest salary.
select first_name, salary from worker where salary = (select max(Salary) from worker);



select f_name , age , (select avg(age) from S1 as e1 where e2.student_id = e1.student_id) from S1 as e1 ; 
select f_name, student_id from S1 as E1 where age > (select avg(age) from S1 where student_id = e1.student_id) ;
