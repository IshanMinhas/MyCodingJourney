#include<iostream > 
#include<bits/stdc++.h>
using namespace std;
#include"Hero.cpp"


class Hero{
private : 
int level;
public :
char character;
char * name;

static int time;
Hero(){
	cout << "this is default" << 

}










};




int main(){

























}















































namespace{+
	int x;
};
int x;


class Base{
};
class Derived : public Base{ };
int main(){ 
	Base * p = new Derived();



}

































































class Node{
	public : 
	int val ;
	Node * left;
	Node * right;
	Node(int val ){
		this->val  = val;
		this->left = NULL;
		this->right = NULL;
	}
};
void preOrder(vector<int > &ans , Node * root){
	if(!root)return NULL;
	ans.push_back(root->val);
	preOrder(root->left);
	preOrder(root->right);
}	

void levelOrderTraversal(Node * root){
	vector<vector<int >> ans;
	if(!root)return NULL;
	queue<Node * > q;
	q.push(root);
	while(!q.empty()){
		int size = q.size();
		vector<int > level;
		for(int i = 0;i < size ; i++){
			TreeNode * temp = q.top();
			q.pop();
			level.psh_back(temp->val);
			if(temp->left)q.push(temp->left);
			if(temp->right)q.push(temp->right);
		}
		ans.push_back(level);



	}
		




}


int getmaxpathsum(){
	if(root == NULL)return ;
	int lh = max(0 , solve(root->left, maxi );
	int rh = max(0 , solve(root->left, maxi );
	maxi = max(left + right + node->val , maxi)
	return max(lh , rh ) + root->val

}


// node vertical  level

























































int main( ) {	
	
	if(!root)return 0;
	int maxi = INT_MIN;
	solve( root , maxi );









}